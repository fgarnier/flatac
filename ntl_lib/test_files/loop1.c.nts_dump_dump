nts loop1 ; 
NonDetInt{

out ndet,validity_ndet_ : int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { havoc(ndet,validity_ndet_) }
}
__NdetValInRange{
in lowerb,lbval,upperb,upbval : int;

out ndval,ndvalid : int;
initial sinit;
final s1;
 
 sinit->s1 { ndval' <=  upperb and ndval' >= lowerb and ndvalid' = 1 and havoc(ndval,ndvalid) }
}
__VERIFIER_nondet_int{

out ndet,validity_ndet_ : int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { havoc(ndet,validity_ndet_) }
}
__assert_fail{
in a,b,c,d,e,f,g,h : int;

initial sinit;

error s0; 
 sinit->s0 { havoc() }
}
main{

mid_2_base,mid_2_size,mid_1_base,mid_1_size,__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,validity____retres_,__ndet_cond__,__if_ndet_cond__,_ndet_arg_4,_ndet_arg_3,_ndet_arg_2,_ndet_arg_1,_ndet_arg_0,__retres : int;
out ret_val_,validity__ret_val__ : int;
initial sinit;
final s23;
error s1,s10,s11,s14,s18,s19,s22,s24,s25,s3,s8; 
 s0->s2 { n' = 10 and havoc(n) } 
 s12->s15 { i' = i+1 and havoc(i) } 
 s13->s16 { havoc() } 
 s15->s5 { havoc() } 
 s16->s17 { 0 <=  j and havoc() } 
 s16->s20 { 0 > j and __retres' = 0 and havoc(__retres) } 
 s17->s20 { j >= n and __retres' = 0 and havoc(__retres) } 
 s17->s21 { j < n and havoc() } 
 s2->s4 { i' = 0 and havoc(i) } 
 s20->s23 { ret_val_' = __retres and havoc(ret_val_) } 
 s21->s20 { i <=  n and __retres' = 0 and havoc(__retres) } 
 s21->sinter0 { i > n and havoc(_ndet_arg_1,_ndet_arg_2) } 
 s21->sinter1 { i > n and havoc(_ndet_arg_1,_ndet_arg_2) } 
 s4->s5 { havoc() } 
 s5->s6 { havoc() } 
 s6->s7 { i < n and havoc() } 
 s6->s9 { i >= n and havoc() } 
 s7->s11 { not (i < 10 and i >= 0) and havoc() } 
 s7->s12 { i < 10 and i >= 0 and havoc() } 
 s9->s13 { havoc() } 
 sinit->s0 { mid_1_size' = 10*4 and mid_2_size' = 10*4 } 
 sinter0->s25 { __assert_fail(_ndet_arg_0,1,_ndet_arg_1,1,16,1,_ndet_arg_2,1) and havoc() } 
 sinter1->s25 { __assert_fail(_ndet_arg_0,1,_ndet_arg_1,1,16,1,_ndet_arg_2,1) and havoc() }
}
memcpy{
in dest_off,dest_val,src_off,srv_val,sizein,size_val : int;

out ret_addr,valid_ret : int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { ret_addr' = dest_off and valid_ret' = dest_val and havoc(ret_addr,valid_ret) }
}
printf{
in a,b,c,d : int;

out off,val : int;
initial sinit;
final sfinal;
 
 sinit->sfinal { havoc(off,val) }
}
strlen{
in ptr_off,ptr_valid : int;

out len,valid_len : int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { valid_len' = ptr_valid and havoc(valid_len,len) }
}
strstr{
in a,b,c,d : int;

out off,val : int;
initial sinit;
final sfinal;
 
 sinit->sfinal { val' = b and havoc(off,val) }
}

 