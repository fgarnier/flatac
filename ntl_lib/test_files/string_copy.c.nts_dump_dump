nts string_copy ; 
NonDetInt{

out ndet,validity_ndet_ : int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { havoc(ndet,validity_ndet_) }
}
__VERIFIER_nondet_int{

out ndet,validity_ndet_ : int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { havoc(ndet,validity_ndet_) }
}
__assert_fail{
in a,b,c,d,e,f,g,h : int;

initial sinit;

error s0; 
 sinit->s0 { havoc() }
}
main{

mid_4_base,mid_4_size,mid_3_base,mid_3_size,mid_2_base,mid_2_size,mid_1_base,mid_1_size,__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,validity____retres_,validity__i_,validity__k_,validity__x_,validity__y_,__ndet_cond__,__if_ndet_cond__,_ndet_arg_0,__retres,k,i : int;
out ret_val_,validity__ret_val__ : int;
initial sinit;
final s24;
error s1,s10,s12,s14,s16,s18,s20,s22,s3,s8; 
 s0->sinter0 { havoc() } 
 s11->s16 { not ((i < 100 and i >= 0) and (i < 100 and i >= 0)) and havoc() } 
 s11->s17 { (i < 100 and i >= 0) and (i < 100 and i >= 0) and havoc() } 
 s13->s15 { havoc() } 
 s15->s18 { not (i < 100 and i >= 0) and havoc() } 
 s15->s19 { i < 100 and i >= 0 and havoc() } 
 s17->s21 { i' = i+1 and havoc(i) } 
 s19->s23 { __retres' = 0 and havoc(__retres) } 
 s2->s4 { i' = 0 and havoc(i) } 
 s21->s5 { havoc() } 
 s23->s24 { ret_val_' = __retres and havoc(ret_val_) } 
 s4->s5 { havoc() } 
 s5->s6 { havoc() } 
 s6->s10 { not (i < 100 and i >= 0) and havoc() } 
 s6->s7 { (__if_ndet_cond__ = 0 and i < 100) and i >= 0 and havoc(__if_ndet_cond__) } 
 s6->s8 { not (i < 100 and i >= 0) and havoc() } 
 s6->s9 { (__if_ndet_cond__ != 0 and i < 100) and i >= 0 and havoc(__if_ndet_cond__) } 
 s7->s11 { i < 99 and havoc() } 
 s7->s13 { i >= 99 and havoc() } 
 s9->s15 { havoc() } 
 sinit->s0 { mid_4_size' = 500 and mid_1_size' = 100 and mid_2_size' = 100 and mid_3_size' = 100 } 
 sinter0->s2 { (k',validity__k_')=NonDetInt() and havoc(k,validity__k_) }
}
memcpy{
in dest_off,dest_val,src_off,srv_val,sizein,size_val : int;

out ret_addr,valid_ret : int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { ret_addr' = dest_off and valid_ret' = dest_val and havoc(ret_addr,valid_ret) }
}
printf{
in a,b,c,d : int;

out off,val : int;
initial sinit;
final sfinal;
 
 sinit->sfinal { havoc(off,val) }
}
strlen{
in ptr_off,ptr_valid : int;

out len,valid_len : int;
initial sinit;
final s1;
 
 s0->s1 { havoc() } 
 sinit->s0 { valid_len' = ptr_valid and havoc(valid_len,len) }
}
strstr{
in a,b,c,d : int;

out off,val : int;
initial sinit;
final sfinal;
 
 sinit->sfinal { val' = b and havoc(off,val) }
}

 