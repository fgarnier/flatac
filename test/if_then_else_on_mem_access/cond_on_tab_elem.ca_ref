nts cond_on_tab_elem;
 
main{
in offset__argv_,validity__argv_,argc,validity__argc_ : int;

mid_2_base,mid_2_size,mid_1_base,mid_1_size,__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,validity____retres_,validity__i_,validity__tab_,__ndet_cond__,__if_ndet_cond__,_ndet_arg_0,__retres,i : int ;

 out ret_val_, validity__ret_val__  : int;
initial sinit ;
final s18;
error s1,s6,s8,s9,s12,s14,s16,s19; sinit->s0 { mid_1_size'=50*4 and mid_2_size'=50*4 } 
 s0->s2 { i'=0 and havoc(i) } 
 s2->s3 { havoc() } 
 s3->s4 { havoc() } 
 s4->s5 { __if_ndet_cond__ = 0 and 0 < 50 and 0 >= 0 and havoc(__if_ndet_cond__) } 
 s4->s6 { not (0 < 50 and 0 >= 0) and havoc() } 
 s4->s7 { __if_ndet_cond__ != 0 and 0 < 50 and 0 >= 0 and havoc(__if_ndet_cond__) } 
 s4->s8 { not (0 < 50 and 0 >= 0) and havoc() } 
 s5->s9 { not (0 < 50 and 0 >= 0) and havoc() } 
 s5->s10 { 0 < 50 and 0 >= 0 and havoc() } 
 s7->s11 { havoc() } 
 s10->s12 { not (i < 50 and i >= 0) and havoc() } 
 s10->s13 { i < 50 and i >= 0 and havoc() } 
 s11->s15 { __retres'=0 and havoc(__retres) } 
 s13->s16 { not (i < 50 and i >= 0) and havoc() } 
 s13->s17 { i < 50 and i >= 0 and havoc(i) } 
 s15->s18 { ret_val_'=__retres and havoc(ret_val_) } 
 s17->s20 { i'=i+1 and havoc(i) } 
 s20->s3 { havoc() }
}
__assert_fail{
in a,b,c,d,e,f,g,h : int;
initial sinit ;
error s0;
sinit->s0 { true and havoc() }
}

NonDetInt{
out ndet, validity_ndet_: int;
initial sinit;
final s1;

sinit->s0{ havoc(ndet,  validity_ndet_)}
s0->s1{havoc()}

}

__VERIFIER_nondet_int{
out ndet, validity_ndet_: int;
initial sinit;
final s1;

sinit->s0{ havoc(ndet,  validity_ndet_)}
s0->s1{havoc()}

}

__NdetValInRange {
 out ndval, ndvalid : int;
 in lowerb, lbval, upperb, upbval : int;
 initial sinit;
 final s1;

 sinit->s1 { ndval' <= upperb and ndval' >= lowerb and ndvalid'=1 and havoc(ndval, ndvalid) }

}
