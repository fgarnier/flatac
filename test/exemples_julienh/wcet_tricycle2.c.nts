nts wcet_tricycle2;
 
main{

__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,validity__count_,validity__i_,validity__phase_,__ndet_cond__,__if_ndet_cond__,_ndet_arg_4,_ndet_arg_3,_ndet_arg_2,_ndet_arg_1,_ndet_arg_0,i,phase,count : int ;

 out ret_val_, validity__ret_val__  : int;
initial sinit ;
final s32;
error s1,s3,s6,s11,s13,s16,s18,s20,s23,s24,s25,s26,s28,s30,s33,s34,s35,s36,s41; sinit->s0 {  } 
 s0->s2 { count'=0 and havoc(count) } 
 s2->s4 { phase'=0 and havoc(phase) } 
 s4->s5 { havoc() } 
 s5->s7 { i'=0 and havoc(i) } 
 s7->s8 { havoc() } 
 s8->s9 { havoc() } 
 s9->s10 { i < 10000 and havoc() } 
 s9->s12 { i >= 10000 and havoc() } 
 s10->s14 { havoc() } 
 s12->s15 { havoc() } 
 s14->s17 { phase != 0 and phase != 1 and havoc() } 
 s14->s19 { count'=count+2 and false or phase = 1 and havoc(count) } 
 s14->s21 { count'=count+3 and false or phase = 0 and havoc(count) } 
 s15->s22 { 0 <=  count and havoc() } 
 s15->sinter0 { 0 > count and havoc(_ndet_arg_1,_ndet_arg_2) } 
 sinter0->s25 { __assert_fail(_ndet_arg_0,1,_ndet_arg_1,1,21,1,_ndet_arg_2,1) and havoc() } 
 s15->sinter1 { 0 > count and havoc(_ndet_arg_1,_ndet_arg_2) } 
 sinter1->s25 { __assert_fail(_ndet_arg_0,1,_ndet_arg_1,1,21,1,_ndet_arg_2,1) and havoc() } 
 s17->s27 { count'=count+1 and havoc(count) } 
 s19->s29 { phase'=2 and havoc(phase) } 
 s21->s31 { phase'=1 and havoc(phase) } 
 s22->s32 { ret_val_'=count and count <=  20001 and havoc(ret_val_) } 
 s22->sinter2 { count > 20001 and havoc(_ndet_arg_1,_ndet_arg_2) } 
 sinter2->s35 { __assert_fail(_ndet_arg_0,1,_ndet_arg_1,1,21,1,_ndet_arg_2,1) and havoc() } 
 s22->sinter3 { count > 20001 and havoc(_ndet_arg_1,_ndet_arg_2) } 
 sinter3->s35 { __assert_fail(_ndet_arg_0,1,_ndet_arg_1,1,21,1,_ndet_arg_2,1) and havoc() } 
 s27->s37 { phase'=0 and havoc(phase) } 
 s29->s38 { havoc() } 
 s31->s39 { havoc() } 
 s37->s40 { havoc() } 
 s38->s42 { i'=i+1 and havoc(i) } 
 s39->s42 { i'=i+1 and havoc(i) } 
 s40->s42 { i'=i+1 and havoc(i) } 
 s42->s8 { havoc() }
}
__assert_fail{
in a,b,c,d,e,f,g,h : int;
initial sinit ;
error s0;
sinit->s0 { true and havoc() }
}

NonDetInt{
out ndet, validity_ndet_: int;
initial sinit;
final s1;

sinit->s0{ havoc(ndet,  validity_ndet_)}
s0->s1{havoc()}

}

__VERIFIER_nondet_int{
out ndet, validity_ndet_: int;
initial sinit;
final s1;

sinit->s0{ havoc(ndet,  validity_ndet_)}
s0->s1{havoc()}

}

__NdetValInRange {
 out ndval, ndvalid : int;
 in lowerb, lbval, upperb, upbval : int;
 initial sinit;
 final s1;

 sinit->s1 { ndval' <= upperb and ndval' >= lowerb and ndvalid'=1 and havoc(ndval, ndvalid) }

}
